{
  "code": 0,
  "data": {
    "records": [
      {
        "id": "1686690187289038850",
        "title": "java学习面向对象-类与对象-day04",
        "description": null,
        "content": "## this的作用是什么？都有哪些用途？\n\n#### this 是一个关键字，在Java中用于指代当前对象实例。它有以下主要作用和用途：\n\n- 引用当前对象：this 关键字用于在类的实例方法中引用当前对象。在方法内部，您可以使用 this 来访问当前对象的成员变量和方法。\n- 调用当前对象的方法：this 关键字可以用于在实例方法中调用当前对象的其他方法。这样可以避免与方法参数或局部变量名称产生混淆。\n- 构造函数重载：在构造函数中，如果需要调用该类的其他构造函数来初始化对象，可以使用 this 关键字。\n- 区分成员变量和局部变量：在方法中，如果成员变量和方法参数（或局部变量）具有相同的名称，可以使用 this 来区分。\n- 在内部类中访问外部类：当在一个内部类中存在与外部类同名的成员变量或方法时，使用 this 关键字可以访问外部类的成员。\n\n**总结:this 关键字在 Java 中主要用于引用当前对象实例，解决命名冲突问题，构造函数重载，以及在内部类中访问外部类的成员。使用 this 关键字可以提高代码的可读性，避免歧义，并使得代码更加清晰和易于理解。**\n\n## super的作用是什么？都有哪些用途？\n\nsuper 是一个关键字，在Java中用于引用父类的成员（包括构造函数和方法）\n\n- 访问父类的成员：在子类中，可以使用 super 关键字来引用父类的成员变量和方法。这允许子类访问父类的实现，并在此基础上进行扩展或重写。\n- 调用父类的构造函数：在子类的构造函数中，可以使用 super 关键字来调用父类的构造函数，以便在子类对象初始化时先执行父类的构造函数。\n- 在内部类中访问外部类的同名成员：当在内部类中存在与外部类同名的成员变量或方法时，使用 super 关键字可以访问外部类的成员。\n\n\n总结:super 关键字在 Java 中主要用于访问父类的成员，调用父类的构造函数，以及在内部类中访问外部类的同名成员。使用 super 关键字可以使代码更加灵活和可扩展，同时充分利用继承和多态的特性。\n\n## static的作用和使用场景\n### static 是一个关键字，在Java中有多种用途，它主要用于定义类级别的成员，而不是实例级别的成员。\n\n- 静态成员变量：使用 static 关键字定义的成员变量称为静态变量或类变量。静态变量属于类本身，而不是类的实例，因此它在所有实例之间共享。\n\n- 静态方法：使用 static 关键字定义的方法称为静态方法或类方法。静态方法不依赖于类的实例，可以直接通过类名调用，无需创建对象。\n\n- 静态块：使用 static 关键字定义的静态块用于在类加载时执行一些初始化操作。静态块在类的静态成员初始化之前执行。\n\n- 单例模式：静态方法可以用于实现单例模式，确保类只有一个实例存在。\n\n\n- *工具类：静态方法通常用于创建工具类，其中的方法不依赖于实例状态，而只是根据传入的参数进行处理。*\n\n**小结:static 关键字用于定义类级别的成员，不依赖于类的实例。静态成员在整个类的生命周期中只有一份副本，并且可以通过类名直接访问。常见的使用场景包括静态成员变量、静态方法、静态块、实现单例模式和创建工具类。请注意，过度使用静态成员可能会导致代码难以维护，应该谨慎使用。**\n\n\n## final 是一个修饰符（关键字），在Java中用于表示“最终”的含义。当使用 final 修饰某个成员（变量、方法或类）时，表示该成员的值、实现或继承关系不可改变。\n\n\n- 对变量的作用：\n        - final 修饰的变量为常量（常量也称为不可变的变量）。一旦在声明时或构造函数中赋值后，该变量的值不能再改变。\n        - final 变量必须在声明时或构造函数中进行初始化，之后不能再进行赋值。\n\n\n- 对方法的作用：\n    - final 修饰的方法为最终方法，表示该方法不可被子类重写（覆盖）。\n    - 子类无法修改 final 方法的实现，保证了方法的稳定性和一致性。\n    \n-     对类的作用：\n        - final 修饰的类为最终类，表示该类不可被继承，即不能有子类。\n        - 常见用法是将某些类设计成工具类或单例模式，防止其他类对其进行继承。\n\n- 对实例变量的作用：\n    - final 修饰的实例变量表示它的值在对象初始化后不能再被修改。这对于确保在对象生命周期内实例变量不会被改变非常有用。\n\n**小结:final 修饰符的作用是确保某个成员的不可变性、不可修改性或不可扩展性，它有助于提高代码的可靠性和安全性。在适当的情况下使用 final 可以让代码更易于维护和理解，并防止意外的改变或扩展。**\n\n\n## 静态代码块的语法和执行的时机\n##### 静态代码块是 Java 中用 static 修饰的一种特殊代码块。它用于在类加载时执行一些初始化操作。\n\n静态代码块可以在类中的任何位置定义，它们会按照在类中的顺序执行。当 JVM 加载类时，首先会执行所有静态代码块，然后再执行其他成员的初始化操作。\n\n        静态代码块的执行时机：\n         在类加载时执行：静态代码块在类加载时执行，且仅执行一次。类的加载过程是在第一次访问该类时发生的，包括创建对象、访问静态成员等。\n        顺序执行：如果一个类中定义了多个静态代码块，它们会按照在类中的顺序依次执行。\n        \n**总结：静态代码块是在类加载时执行的，仅执行一次。它可以用于执行一些类级别的初始化操作，例如初始化静态成员变量或加载静态资源。由于静态代码块在类加载时自动执行，因此适用于类级别的初始化场景。  **    \n\n## 匿名内部类的作用和语法\n\n匿名内部类是一种特殊的内部类，它没有显式的类名，直接在创建对象时定义并实例化。匿名内部类通常用于实现接口或继承抽象类的情况，且只使用一次，避免为每个实现创建新的类。\n\n        实现接口或继承抽象类：匿名内部类可以用于在创建对象时实现接口或继承抽象类，并在同一处定义接口的实现或抽象类的扩展。\n\n        简化代码结构：对于一些简单的逻辑，使用匿名内部类可以避免为每个实现创建新的类，使代码更简洁。\n        \n        \n        语法：\n        匿名内部类的语法如下:\n        \n```java\n        Interface myInterface = new Interface() {\n    // 匿名内部类的实现代码\n    // 实现接口中的方法\n    };\n\n```\n\n\n    继承抽象类\n    \n```java\n\n    AbstractClass myAbstractClass = new AbstractClass() {\n    // 匿名内部类的实现代码\n    // 实现抽象类中的抽象方法\n};\n\n```\n\n**注意事项：**\n\n    匿名内部类没有显式的类名，因此无法被其他地方引用或重用。它只能在创建对象时使用，并且只能使用一次。\n    \n    匿名内部类可以访问外部类的成员和方法，也可以访问 final 或事实上为 final 的局部变量（Java 8+ 中）。\n    \n    在匿名内部类中，不能定义静态成员、静态方法或构造函数。\n    \n    当使用匿名内部类时，通常会在创建对象的同时重写抽象方法或接口方法，使代码更简洁，更集中，但也会增加代码的阅读难度，需要根据实际情况进行取舍。\n\n\n## 枚举类的作用和语法\n\n##### 枚举类（Enum Class）是一种特殊的类，用于定义一组固定的常量。枚举类的作用是将常量值集中在一个类中，提供更加简洁和可读性强的代码，避免使用普通类或整数常量来表示固定的常量值。\n\n\n**语法**\n\n\n```java\n\n        enum EnumName {\n    CONSTANT1,\n    CONSTANT2,\n    // ... 其他常量\n}\n\n```\n**枚举类的优势：**\n\n    类型安全：枚举类提供了类型安全的枚举常量，不需要担心传入无效的常量值。\n    \n    可读性强：枚举常量具有自解释性，代码更加可读和易于维护。\n    \n    唯一性：每个枚举常量在枚举类中都是唯一的，保证了常量值的唯一性。\n    \n枚举类在实际开发中常用于表示状态、选项、日期、星期几等具有固定值的场景。使用枚举类可以增加代码的可读性，提高代码的可维护性，并避免传入无效或非预期的常量值。\n    \n    \n\n\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 1,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-08-02T10:47:32.000+00:00",
        "updateTime": "2023-08-02T10:47:54.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 2,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-07-30T03:54:27.000+00:00"
        },
        "tags": [
          "文章"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1686534260355239938",
        "title": "自我介绍",
        "description": "自我介绍",
        "content": "<p>大家好 , 我是苏麟!</p>\n   <p> &nbsp&nbsp&nbsp&nbsp目前是大二学生(双非本科)软件专业 , 大一报了培训机构(java后端方向) , 学了一些东西但感觉总是差些意思 , 希望跟着鱼皮更进一步 , 早日拿到大厂offer.\n    </p>\n &nbsp&nbsp &nbsp&nbsp  项目经历:</br>    \n    \n1. 旅游\n2. 管理系统\n3. 瑞吉外卖\n4. 尚医通\n\n也祝大家早日进大厂,得偿所愿!\n",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1684561774759645186/oQ8YxVOV-1911f1b9cd3641498364f0f756d3eb9e.jpg",
        "language": null,
        "viewNum": 20,
        "thumbNum": 1,
        "favourNum": 0,
        "commentNum": 1,
        "priority": 0,
        "userId": "1684561774759645186",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-08-02T00:27:56.000+00:00",
        "updateTime": "2023-08-02T11:43:36.000+00:00",
        "user": {
          "id": "1684561774759645186",
          "planetCode": "25145",
          "userName": "苏麟",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/n6zz2N2CWO3rY0u7a2w4YsBNScsoA8cCItnWwbg91HzEStMVKYAr196WXmL8ByicHDbcTYQa7DFK1iaWmzOEwhiaQ/132",
          "gender": 1,
          "userProfile": "万般皆是命半点不由人...",
          "userRole": "vip",
          "interests": [],
          "place": "黑龙江",
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": 2025,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "实习",
          "github": null,
          "blog": null,
          "score": 10,
          "coin": 100,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-07-27T13:16:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-07-27T13:49:59.000+00:00",
          "updateTime": "2023-08-02T00:28:17.000+00:00"
        },
        "tags": [
          "文章",
          "自我介绍"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1685845258216148993",
        "title": "面试记录",
        "description": "在知识星球分享的面经",
        "content": "### 因为像刚刚自我介绍里面说的，知识星球和编程导航是分开的，于是把这次面试也分享在编程导航！\n### \n**刷到了有分享面经的帖子，回想到唯一一次的面试，于是乎咱也分享一下，权当记录。**\n\n> 是女朋友的老师推荐的一家师兄的公司，老师突然问我们的安排，叫我们发了简历过去，然后很上心，过了许久我们没收到面试通知还帮我们催，发现是因为师兄以为我和我女朋友都要投简历，我投了，我女朋友有考公安排就没有投，在等我女朋友的简历才没有给我面试。于是乎说了之后隔天就给我打了电话！我的第一次长达22分钟的面试！接到电话手都是抖的！很震惊，但是确实在忙兼职还有暑假前期在外面旅游，没有学习，也可能确实是因为基础本身就不牢固，对概念性的理解较少，回答的不是很好，结束时师兄也总结说我基础还不够牢固，需要多加学习，还有优化一下简历，叫我坚持，多学习！总之还是很感谢女朋友还有老师还有师兄给了我一次面试的机会！废话有点多了哈哈哈，以下是面经，顺便贴上我那烂简历，可能没有什么借鉴参考性，权当记录啦\n\n1. 数组、链表的概念\n2. 对ArrayList、LinkedList的了解\n3. List、Set和Map的区别\n4. Servlet是什么？生命周期是？\n5. 介绍一下Spring \n6. 对SpringMVC的了解\n7. Spring的控制反转如何实现\n8. AOP如何实现\n9. 数据库的四个特性\n10. 对SpringBoot和Spring Cloud的了解\n11. MySQL使用了什么集成框架\n12. 介绍一下MyBatis\n\n**以上就是长达22分钟的面试，时长看来是因为我废话可能有点多了，答不到点上，权当记录**\n\n![微信图片编辑_20230731104718.jpg](https://pic.code-nav.cn/post_picture/1685172658901094401/GAxqEOQy-微信图片编辑_20230731104718.jpg)",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1685172658901094401/QQdTV6U8-微信图片_20230730171359.jpg",
        "language": null,
        "viewNum": 45,
        "thumbNum": 1,
        "favourNum": 1,
        "commentNum": 0,
        "priority": 0,
        "userId": "1685172658901094401",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-07-31T02:50:05.000+00:00",
        "updateTime": "2023-08-02T14:29:47.000+00:00",
        "user": {
          "id": "1685172658901094401",
          "planetCode": "25090",
          "userName": "coder_George",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1685172658901094401/GaUoFB2t-微信图片_20230730171359.jpg",
          "gender": 1,
          "userProfile": "目标：Java后端开发",
          "userRole": "vip",
          "interests": [],
          "place": "广东珠海",
          "birthday": "2002-04-07",
          "school": "吉林大学珠海学院",
          "major": "软件工程",
          "education": "本科",
          "graduationYear": 2024,
          "jobStatus": "求职中",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "校招",
          "github": null,
          "blog": null,
          "score": 10,
          "coin": 100,
          "followeeNum": 1,
          "followNum": 1,
          "followStatus": null,
          "vipExpireTime": "2024-07-27T02:57:58.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-07-29T06:17:25.000+00:00",
          "updateTime": "2023-08-02T03:29:03.000+00:00"
        },
        "tags": [
          "文章"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1684236816225406977",
        "title": "React 新官方文档，添加交互",
        "description": "使用 React 让你的页面动起来，学习一种编程思维",
        "content": "## 添加交互\n\n​\tReact 的宣言就是为了构建交互式 UI 变得轻而易举。所以添加交互是 React 的核心功能，如果你学过 JQuery，你一定知道 **命令式编程** 和 **声明式编程，**同样一段交互逻辑，可能 React 要比 JQuery 省去几十行代码，那么来系统的学习一下 React 添加交互的开发范式吧！\n\n你经常看到屏幕上的某些内容会根据用户操作进行更新。例如，单击图像库可切换不同的图像。在 React 中，随时间变化的数据称为状态。您可以向任何组件添加状态，并根据需要更新它。在本章中，您将学习如何编写处理交互、更新其状态以及随时间显示不同输出的组件。学习目录如下：\n\n1. 如何处理用户发起的事件 ？\n2. 如何让组件“记住”带有状态的信息 ？ \n3. React 如何分两个阶段更新 UI  ？\n4. 为什么状态在更改后没有立即更新  ？\n5. 如何对多个状态更新进行排队  ？\n6. 如何更新对象的状态  ？\n7. 如何更新状态数组 ？\n\n### 响应事件\n\nReact 允许您向 JSX 添加事件处理程序。事件处理程序是您自己的函数，将响应用户交互（例如单击、悬停、关注表单输入等）而触发。 内置组件仅支持 onClick 等内置浏览器事件。但是，您也可以创建自己的组件，并且给组件定义任何（语义化的，您喜欢的）属性名称。来触发交互事件，例如：\n\n```JavaScript\n// 自定义了按钮组件：Button 和工具栏组件：Toolbar，它们都有自定义的属性，例如：onClick，\n// onPlayMovie等等，父组件传值，来实现它们自己的交互逻辑\nexport default function App() {\n  return (\n    <Toolbar\n      onPlayMovie={() => alert('Playing!')}\n      onUploadImage={() => alert('Uploading!')}\n    />\n  );\n}\n\nfunction Toolbar({ onPlayMovie, onUploadImage }) {\n  return (\n    <div>\n      <Button onClick={onPlayMovie}>\n        Play Movie\n      </Button>\n      <Button onClick={onUploadImage}>\n        Upload Image\n      </Button>\n    </div>\n  );\n}\n\nfunction Button({ onClick, children }) {\n  return (\n    <button onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n```\n\n###  状态：一个组件的内存\n\n我们最常见的交互就是通过操作修改屏幕显示的内容，例如：在表格中输入应更新输入字段，单击图像转盘上的“下一步”应更改显示的图像，单击“购买”将产品放入购物车。组件需要“记住”一些东西（也就是需要 useState 来存储这些会变化的状态）：当前输入值、当前图像、购物车。在React中，这种特定于组件（这里再强调一下，React 中所有都可以看成组件，无论是大到 页面根组件，页面组件，小到一个按钮组件，这些都是一个组件）的内存被称为状态。\n\nReact 中使用 hooks 来驱动视图更新，这里的状态就是：`useState Hooks`， 这里 `useState ` 返回当前状态值 和 更新 state 的设置器函数，例如：\n\n```JavaScript\n// 我们可以通过 index 获取当前状态，通过 setIndex 更新当前状态，\n// 当 index 的值变化，react 就会触发重新渲染\nconst [index, setIndex] = useState(0);\n```\n\n### 呈现和提交\n\n在您的 React 组件显示在屏幕上之前，它们必须由 React 渲染。了解这个**过程中的步骤**将有助于您思考代码是如何执行和解释其行为的。\n\n打个比方，你的组件是厨房里的厨师，用食材组装美味的菜肴。在这个场景中，React是服务员，他提出客户的请求并为他们带来订单。这个请求和服务UI的过程有三个步骤：\n\n1. 触发渲染（将用餐者的订单送到厨房）\n2. 渲染组件（在厨房准备订单）\n3. 展示到 DOM（在餐桌上把订单的菜展示摆好）\n\n![output](C:\\Users\\SnailRun\\Desktop\\临时文件\\output.png)\n\n### 状态做为一个快照\n\n这是 React 的一个核心思想，数据的更新，不是更新现在的状态变量，而是重新触发渲染，我们现在都是在写函数组件，也就是当 state 更新，就代表着，这个函数组件也就是这个函数重新执行一遍，并且是带着最新的 state 更新的，**这里值得注意的是 state 的更新是异步的**，\n\n让我通过一个类比来解释 **state 的更新是异步的**这个问题。\n\n假设你正在玩一个电子游戏，你的角色有一个生命值（HP）的状态。每次你的角色受到攻击，你都需要更新这个生命值。如果每次受到攻击，游戏都立即停下来，更新生命值，然后再继续，那么游戏的流畅度会大大降低，这会影响到游戏的体验。\n\n相反，如果游戏将所有的攻击事件收集起来，然后在一次过程中统一处理，例如在每一帧的更新时，那么游戏就可以保持流畅，玩家的体验也会更好。\n\nReact的 `useState` 就类似于这个过程。当你调用状态更新函数时，React 并不会立即更新状态和重新渲染组件。相反，它会将这个更新事件放入一个队列中，然后在一个合适的时间，如下一次渲染周期，统一处理这些更新。这样，React 就可以批量处理多个状态更新，避免不必要的渲染，从而提高应用的性能。\n\n这就是为什么我们说 React 的状态更新是“异步”的。这并不意味着它使用了 JavaScript 的异步功能（如 Promise 或者 setTimeout ），而是指 React 选择了在未来的某个时间点，而不是立即处理状态更新。\n\n### **对一系列状态更新进行排队**\n\n看例子：\n\n```JavaScript\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [score, setScore] = useState(0);\n\n  function increment() {\n    setScore(score + 1);\n  }\n\n  return (\n    <>\n      <button onClick={() => increment()}>+1</button>\n      <button onClick={() => {\n        increment();\n        increment();\n        increment();\n      }}>+3</button>\n      <h1>Score: {score}</h1>\n    </>\n  )\n}\n```\n\n这里调用 `increment `三次，但是当我点击 +3，结果却是 +1 ，就是因为 increment 函数连续执行3次的时候，score 的值都是 1（拿到的是 state 快照，而不是最新的值），而不是 1,2,3 ，即使执行三次，得到的结果也是和 +1 的结果一致，\n\n### **更新作为状态的对象**\n\n当我们把 state 设置为一个 对象类型的时候，我们想要更新 这个对象 state，我们应该 创建一个新的对象引用，而不是去修改之前的 state，因为如果我们仅仅修改之前的state，它对象的引用还是一样，React 就检测不到 state 更新，也就不会触发页面刷新，所以 我们经常通过扩展运算符去新建对象覆盖源对象，而不是直接修改原数据的属性，这里数组也是一样的，因为在 JavaScript 中，数组就是一个特殊的对象而已，当我们遵从不可变性原理，我们在面对需要时间旅行的需求时候，也变得更加简单\n\n最后，官方推荐使用 Immer 这样不可变性的库来帮我们更高效的进行开发\n\n### END\n\n添加交互就结束啦，下一章，学习【状态管理】，学习完成后，你就知道当我们面对多个组件共享数据的时候，我们有哪些方法来快速实现我们的需求",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1619930914211520514/r0v0pAcg-Snipaste_2023-06-27_00-36-41.png",
        "language": null,
        "viewNum": 27,
        "thumbNum": 2,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1619930914211520514",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-07-26T16:18:43.000+00:00",
        "updateTime": "2023-08-01T16:14:03.000+00:00",
        "user": {
          "id": "1619930914211520514",
          "planetCode": "1012",
          "userName": "SnailRun",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/aRneVaen8XSWOILibfkW5SHicYZia2oDxA8zKUtnzLRVFbwiclEK8f80QMRk3kviawzL8gTWk4MgA0P0VeF1r0O0upg/132",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": "https://github.com/chaseFunny",
          "blog": "https://chasefunny.github.io/",
          "score": 0,
          "coin": 0,
          "followeeNum": 11,
          "followNum": 3,
          "followStatus": null,
          "vipExpireTime": "2024-02-13T14:37:59.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-01-30T05:30:01.000+00:00",
          "updateTime": "2023-07-26T16:16:55.000+00:00"
        },
        "tags": [
          "文章",
          "React",
          "笔记"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1683090767360299010",
        "title": "零基础手把手带你阅读Redis源代码系列-ZSet底层原理详解（跳表SkipList）",
        "description": "带你阅读跳表源码",
        "content": ">之前就说了要来西索Redis，现在来辣！\n>\n>本文的部分内容参考自《小林Coding》，部分地方根据源代码进行剖析。\n>\n>Redis源码地址：https://github.com/redis/redis.git\n>\n>更多内容可以看我博客：https://cloud.tencent.com/developer/user/2871589\n\n\n## ZSet\n\n### 观其面\n\n和Set类似，但是新增了一个排序字段。\n\n![image-20230723015004842](http://gd.7n.cdn.wzl1.top/typora/img/image-20230723015004842.png)\n\n常用操作\n\n```bash\n# 往有序集合key中加入带分值元素\nZADD key score member [[score member]...]   \n# 往有序集合key中删除元素\nZREM key member [member...]                 \n# 返回有序集合key中元素member的分值\nZSCORE key member\n# 返回有序集合key中元素个数\nZCARD key \n# 为有序集合key中元素member的分值加上increment\nZINCRBY key increment member \n# 正序获取有序集合key从start下标到stop下标的元素\nZRANGE key start stop [WITHSCORES]\n# 倒序获取有序集合key从start下标到stop下标的元素\nZREVRANGE key start stop [WITHSCORES]\n# 返回有序集合中指定分数区间内的成员，分数由低到高排序。\nZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]\n# 返回指定成员区间内的成员，按字典正序排列, 分数必须相同。\nZRANGEBYLEX key min max [LIMIT offset count]\n# 返回指定成员区间内的成员，按字典倒序排列, 分数必须相同\nZREVRANGEBYLEX key max min [LIMIT offset count]\n```\n\n运算操作\n\n```bash\n# 并集计算(相同元素分值相加)，numberkeys一共多少个key，WEIGHTS每个key对应的分值乘积\nZUNIONSTORE destkey numberkeys key [key...] \n# 交集计算(相同元素分值相加)，numberkeys一共多少个key，WEIGHTS每个key对应的分值乘积\nZINTERSTORE destkey numberkeys key [key...]\n```\n\n### 应用场景\n\n#### 排行榜\n\n点赞数量和内容ID相关联，最后再根据ID去查，或者异步更新也可以\n\n为什么不存全部数据？部分数据会修改，那么可能导致value伪重复，加大了业务复杂度\n\n#### 电话、姓名区间排序\n\n使用有序集合的 `ZRANGEBYLEX` 或 `ZREVRANGEBYLEX` 可以帮助我们实现电话号码或姓名的排序，我们以 `ZRANGEBYLEX` （返回指定成员区间内的成员，按 key 正序排列，分数必须相同）为例。\n\n**注意：不要在分数不一致的 SortSet 集合中去使用 ZRANGEBYLEX和 ZREVRANGEBYLEX 指令，因为获取的结果会不准确。**\n\n*1、电话排序*\n\n我们可以将电话号码存储到 SortSet 中，然后根据需要来获取号段：\n\n```shell\n> ZADD phone 0 13100111100 0 13110114300 0 13132110901 \n(integer) 3\n> ZADD phone 0 13200111100 0 13210414300 0 13252110901 \n(integer) 3\n> ZADD phone 0 13300111100 0 13310414300 0 13352110901 \n(integer) 3\n```\n\n获取所有号码:\n\n```shell\n> ZRANGEBYLEX phone - +\n1) \"13100111100\"\n2) \"13110114300\"\n3) \"13132110901\"\n4) \"13200111100\"\n5) \"13210414300\"\n6) \"13252110901\"\n7) \"13300111100\"\n8) \"13310414300\"\n9) \"13352110901\"\n```\n\n获取 132 号段的号码：\n\n```shell\n> ZRANGEBYLEX phone [132 (133\n1) \"13200111100\"\n2) \"13210414300\"\n3) \"13252110901\"\n```\n\n获取132、133号段的号码：\n\n```shell\n> ZRANGEBYLEX phone [132 (134\n1) \"13200111100\"\n2) \"13210414300\"\n3) \"13252110901\"\n4) \"13300111100\"\n5) \"13310414300\"\n6) \"13352110901\"\n```\n\n*2、姓名排序*\n\n```shell\n> zadd names 0 Toumas 0 Jake 0 Bluetuo 0 Gaodeng 0 Aimini 0 Aidehua \n(integer) 6\n```\n\n获取所有人的名字:\n\n```shell\n> ZRANGEBYLEX names - +\n1) \"Aidehua\"\n2) \"Aimini\"\n3) \"Bluetuo\"\n4) \"Gaodeng\"\n5) \"Jake\"\n6) \"Toumas\"\n```\n\n获取名字中大写字母A开头的所有人：\n\n```shell\n> ZRANGEBYLEX names [A (B\n1) \"Aidehua\"\n2) \"Aimini\"\n```\n\n获取名字中大写字母 C 到 Z 的所有人：\n\n```shell\n> ZRANGEBYLEX names [C [Z\n1) \"Gaodeng\"\n2) \"Jake\"\n3) \"Toumas\"\n```\n\n### 究其身\n\ncv完了，现在来看看源码。\n\nZset 类型的底层数据结构是由**压缩列表或跳表**实现的：\n\n- 如果有序集合的元素个数小于 `128` 个，并且每个元素的值小于 `64` 字节时，Redis 会使用**压缩列表**作为 Zset 类型的底层数据结构；\n- 如果有序集合的元素不满足上面的条件，Redis 会使用**跳表**作为 Zset 类型的底层数据结构；\n\n**在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。**\n\nlistpack和压缩列表在之前讲List的时候就已经讲过了，这里主要来讲一讲跳表。\n\n#### 跳表\n\n跳表是从链表的结构上面改进出来的，可以说是多层链表\n\n![image-20230723042434378](http://gd.7n.cdn.wzl1.top/typora/img/image-20230723042434378.png)\n\n图中头节点有 L0~L2 三个头指针，分别指向了不同层级的节点，然后每个层级的节点都通过指针连接起来：\n\n- L0 层级共有 5 个节点，分别是节点1、2、3、4、5；\n- L1 层级共有 3 个节点，分别是节点 2、3、5；\n- L2 层级只有 1 个节点，也就是节点 3 。\n\n下面我们来看看实际的结构\n\n如上图，记录头节点和尾节点~~（图上没有，后面细说）~~，我们封装在一起，成了整个链跳表体\n\n```c\ntypedef struct zskiplist {\n    struct zskiplistNode *header, *tail;\t// 头节点、尾节点\n    unsigned long length;\t\t\t\t\t// 跳表长度\n    int level;\t\t\t\t\t\t\t\t// 最高的层级\n} zskiplist;\n```\n\n那么节点又是怎么定义的呢？如果让我来做的话，我会用给一个数组来表示下一个节点（详细看上图），不过也确实是这样做的\n\n```c\n/* ZSETs use a specialized version of Skiplists */\ntypedef struct zskiplistNode {\n    sds ele;\t\t// 内容\n    double score;\t// 用于排序的字段，我们称之为权重\n    struct zskiplistNode *backward;\t//后向指针 前继\n    // level 数组中的每一个元素代表跳表的一层，也就是由 zskiplistLevel 结构体表示，比如 leve[0] 就表示第一层，leve[1] 就表示第二层。\n    struct zskiplistLevel {\n        struct zskiplistNode *forward;\t// 每层的前向指针 后继\n        unsigned long span;\t\t// 跨度\n    } level[];\t\n} zskiplistNode;\n```\n\n这里对前向和后向进行一个解释：\n\t\t其实就是一个双链表，不过后续指针是一个指针数组，前向指针是后继，后向指针是前继\n\n那么这个跨度是啥？\n**跨度**\n\n用于**计算这个节点在跳表中的排位**。具体怎么做的呢？因为跳表中的节点都是按序排列的，那么计算某个节点排位的时候，**从头节点点到该结点的查询路径上，将==沿途访问过==的所有层的跨度累加起来**，得到的结果就是目标节点在跳表中的排位。\n\n没懂？看上图，把这个节点前面的阶段求个前缀和，他们的结果就是跨度，也就是当前节点的编号。\n\n#### 跳表的创建\n\n```c\n// 定义最高层数 Redis 7.0 定义为 32，Redis 5.0 定义为 64，Redis 3.0 定义为 32\n#define ZSKIPLIST_MAXLEVEL 32 /* Should be enough for 2^64 elements */\n\n/* Create a new skiplist. */\nzskiplist *zslCreate(void) {\n    int j;\n    zskiplist *zsl;\n\n    zsl = zmalloc(sizeof(*zsl));\n    zsl->level = 1;\t\t\t// 初始只有一层\n    zsl->length = 0;\n    zsl->header = zslCreateNode(ZSKIPLIST_MAXLEVEL,0,NULL);\t// 创建一个节点，节点创建在后面讲\n    // 把每一层都初始化\n    for (j = 0; j < ZSKIPLIST_MAXLEVEL; j++) {\n        zsl->header->level[j].forward = NULL;\n        zsl->header->level[j].span = 0;\n    }\n    // 初始化跳表\n    zsl->header->backward = NULL;\n    zsl->tail = NULL;\n    return zsl;\n}\n```\n\n#### 节点创建\n\n```c\n/* Create a skiplist node with the specified number of levels.\n * The SDS string 'ele' is referenced by the node after the call. */\nzskiplistNode *zslCreateNode(int level, double score, sds ele) {\n    zskiplistNode *zn =\n        zmalloc(sizeof(*zn)+level*sizeof(struct zskiplistLevel));\n    zn->score = score;\n    zn->ele = ele;\n    return zn;\n}\n```\n\n#### 跳表的释放\n\n```c\n/* Free a whole skiplist. */\nvoid zslFree(zskiplist *zsl) {\n    zskiplistNode *node = zsl->header->level[0].forward, *next;\n\n    zfree(zsl->header);\t// 释放头节点\n    // 在初始化的时候直接指向了第一个元素\n    while(node) {\n        next = node->level[0].forward;\n        // 释放每一个节点\n        zslFreeNode(node);\n        node = next;\n    }\n    zfree(zsl);\n}\n\n/* Free the specified skiplist node. The referenced SDS string representation\n * of the element is freed too, unless node->ele is set to NULL before calling\n * this function. */\nvoid zslFreeNode(zskiplistNode *node) {\n    sdsfree(node->ele);\t// 释放member\n    zfree(node);\t// 释放节点\n}\n\n/* Free an sds string. No operation is performed if 's' is NULL. */\nvoid sdsfree(sds s) {\n    if (s == NULL) return;\n    s_free((char*)s-sdsHdrSize(s[-1]));\t// s_free就是z_free\n}\n// 呃呃呃，这不解释了\nvoid zfree(void *ptr) {\n#ifndef HAVE_MALLOC_SIZE\n    void *realptr;\n    size_t oldsize;\n#endif\n\n    if (ptr == NULL) return;\n#ifdef HAVE_MALLOC_SIZE\n    update_zmalloc_stat_free(zmalloc_size(ptr));\n    free(ptr);\n#else\n    realptr = (char*)ptr-PREFIX_SIZE;\n    oldsize = *((size_t*)realptr);\n    update_zmalloc_stat_free(oldsize+PREFIX_SIZE);\n    free(realptr);\n#endif\n}\n```\n\n#### 跳表节点查询过程\n\n查找一个跳表节点的过程时，跳表会从头节点的最高层开始，逐一遍历每一层。在遍历某一层的跳表节点时，会用跳表节点中的 SDS 类型的元素和元素的权重来进行判断，共有两个判断条件：\n\n- 如果当前节点的权重 < 要查找的权重时，跳表就会访问该层上的下一个节点。\n- 如果当前节点的权重 = 要查找的权重时，并且当前节点的 SDS 类型数据 < 要查找的数据时，跳表就会访问该层上的下一个节点。\n\n如果上面两个条件都不满足，或者下一个节点为空时，跳表就会使用目前遍历到的节点的 level 数组里的下一层指针，然后沿着下一层指针继续查找，这就相当于跳到了下一层接着查找。\n\n举个例子，下图有个 3 层级的跳表。\n\n![image-20230723053340966](http://gd.7n.cdn.wzl1.top/typora/img/image-20230723053340966.png)\n\n如果要查找「元素：abcd，权重：4」的节点，查找的过程是这样的：\n\n- 先从头节点的最高层开始，L2 指向了「元素：abc，权重：3」节点，这个节点的权重比要查找节点的小，所以要访问该层上的下一个节点；\n- 但是该层的下一个节点是空节点（ leve[2]指向的是空节点），于是就会跳到「元素：abc，权重：3」节点的下一层去找，也就是 leve[1];\n- 「元素：abc，权重：3」节点的 leve[1] 的下一个指针指向了「元素：abcde，权重：4」的节点，然后将其和要查找的节点比较。虽然「元素：abcde，权重：4」的节点的权重和要查找的权重相同，但是当前节点的 SDS 类型数据 > 要查找的数据，所以会继续跳到「元素：abc，权重：3」节点的下一层去找，也就是 leve[0]；\n- 「元素：abc，权重：3」节点的 leve[0] 的下一个指针指向了「元素：abcd，权重：4」的节点，该节点正是要查找的节点，查询结束。\n\n```c\n// 这里是查找的源码，来自下面新增节点的函数\n\tx = zsl->header;\n    //从顶层开始，遍历开始，每次移动不只是移动头节点的level，是所有节点的level，每次都是从上一次遍历到的节点开始\n    for (i = zsl->level-1; i >= 0; i--) {\n        /* store rank that is crossed to reach the insert position */\n        rank[i] = i == (zsl->level-1) ? 0 : rank[i+1];\t\t//如果从头开始，跨度为0，否则累加上一层已经计算的跨度\n        while (x->level[i].forward &&\n                (x->level[i].forward->score < score ||\t\t\t// 权值小于目标\n                    (x->level[i].forward->score == score &&\n                    sdscmp(x->level[i].forward->ele,ele) < 0)))\t// 当前节点的memer小于目标节点\n        {\n            rank[i] += x->level[i].span;\t\t//计算跨度\n            x = x->level[i].forward;\t\t\t//到下一个索引位置\n        }\n        update[i] = x;\t\t//记录当前层开始修改的节点的位置\n    }\n```\n\n\n\n#### 新增节点\n\n```c\n/* Insert a new node in the skiplist. Assumes the element does not already\n * exist (up to the caller to enforce that). The skiplist takes ownership\n * of the passed SDS string 'ele'. */\nzskiplistNode *zslInsert(zskiplist *zsl, double score, sds ele) {\n    zskiplistNode *update[ZSKIPLIST_MAXLEVEL], *x;\n    unsigned long rank[ZSKIPLIST_MAXLEVEL];\n    int i, level;\n\n    serverAssert(!isnan(score));\n    x = zsl->header;\n    //从顶层开始，遍历开始，每次移动不只是移动头节点的level，是所有节点的level，每次都是从上一次遍历到的节点开始\n    for (i = zsl->level-1; i >= 0; i--) {\n        /* store rank that is crossed to reach the insert position */\n        rank[i] = i == (zsl->level-1) ? 0 : rank[i+1];\t\t//如果从头开始，跨度为0，否则累加上一层已经计算的跨度\n        while (x->level[i].forward &&\n                (x->level[i].forward->score < score ||\t\t\t// 权值小于目标\n                    (x->level[i].forward->score == score &&\n                    sdscmp(x->level[i].forward->ele,ele) < 0)))\t// 当前节点的Memer小于目标节点\n        {\n            rank[i] += x->level[i].span;\t\t//计算跨度\n            x = x->level[i].forward;\t\t\t//到下一个索引位置\n        }\n        update[i] = x;\t\t//记录当前层开始修改的节点的位置\n    }\n    /* we assume the element is not already inside, since we allow duplicated\n     * scores, reinserting the same element should never happen since the\n     * caller of zslInsert() should test in the hash table if the element is\n     * already inside or not. */\n \t// 假设要插入的元素在跳跃表中尚不存在，因为跳跃表允许有相同的分值（score）。\n    // 再次插入相同的元素是不应该发生的，因为调用 zslInsert() 函数的调用者应该在哈希表（或其他数据结构）中先测试元素是否已经存在。\n    // 在跳跃表中，允许多个节点具有相同的分值，但它们的元素值必须不同。\n    level = zslRandomLevel();\t//随机生成一个层数\n    if (level > zsl->level) {\t\t\n        // 如果这个level达到新高，那么往上面走，走到顶全部初始化（你可以理解为对level进行扩容）\n        for (i = zsl->level; i < level; i++) {\n            rank[i] = 0;\n            update[i] = zsl->header;\n            // 新的level,那么再old_level到level之间的跨度每层都是length\n            update[i]->level[i].span = zsl->length;\n        }\n        zsl->level = level;\n    }\n    x = zslCreateNode(level,score,ele);\t// 创建一个新的节点\n    for (i = 0; i < level; i++) {\n        //插入节点（基础知识：单链表的节点插入），修改第Li层的后继\n        x->level[i].forward = update[i]->level[i].forward;\t\n        update[i]->level[i].forward = x;\n\n        /* update span covered by update[i] as x is inserted here */\n        // (rank[0] - rank[i])为新节点到前一层节点的跨度差\n        // update[i]->level[i].span 表示的是原本前一个节点到后一个节点建的跨度\n        // 这里新来了一个节点，前一个节点新节点的跨度是rank[0] - rank[i]，另外一个就互补，见一下就可以了\n        x->level[i].span = update[i]->level[i].span - (rank[0] - rank[i]);\n        // 修改前一个节点的跨度，但是这个节点本身也算一个系欸但，所以要加1\n        update[i]->level[i].span = (rank[0] - rank[i]) + 1;\n    }\n\n    /* increment span for untouched levels */\n    // 前面我们只修改了同层，上面的每一层因为中间多了一个，所以跨度加一\n    for (i = level; i < zsl->level; i++) {\n        update[i]->level[i].span++;\n    }\n\t// 修改x的前继指针\n    x->backward = (update[0] == zsl->header) ? NULL : update[0];\n    if (x->level[0].forward)\n        x->level[0].forward->backward = x;\t// 只修改最下面一层的\n    else\n        zsl->tail = x;\t//把x放在最后\n    zsl->length++;\n    return x;\n}\n```\n\n#### 删除节点\n\n```c\n/* Delete an element with matching score/element from the skiplist.\n * The function returns 1 if the node was found and deleted, otherwise\n * 0 is returned.\n *\n * If 'node' is NULL the deleted node is freed by zslFreeNode(), otherwise\n * it is not freed (but just unlinked) and *node is set to the node pointer,\n * so that it is possible for the caller to reuse the node (including the\n * referenced SDS string at node->ele). */\nint zslDelete(zskiplist *zsl, double score, sds ele, zskiplistNode **node) {\n    zskiplistNode *update[ZSKIPLIST_MAXLEVEL], *x;\n    int i;\n\n    x = zsl->header;\n    // 这里再将新增的时候讲过了\n    for (i = zsl->level-1; i >= 0; i--) {\n        while (x->level[i].forward &&\n                (x->level[i].forward->score < score ||\n                    (x->level[i].forward->score == score &&\n                     sdscmp(x->level[i].forward->ele,ele) < 0)))\n        {\n            x = x->level[i].forward;\n        }\n        update[i] = x;\n    }\n    /* We may have multiple elements with the same score, what we need\n     * is to find the element with both the right score and object. */\n    x = x->level[0].forward;\n    if (x && score == x->score && sdscmp(x->ele,ele) == 0) {\n        // 进行节点删除，并且把关联系欸但进行修改\n        zslDeleteNode(zsl, x, update);\n        if (!node)\n            // 把空间释放\n            zslFreeNode(x);\n        else\n            *node = x;\n        return 1;\n    }\n    return 0; /* not found */\n}\n```\n\n##### 解决连锁反应\n\n```c\nvoid zslDeleteNode(zskiplist *zsl, zskiplistNode *x, zskiplistNode **update) {\n    int i;\n    for (i = 0; i < zsl->level; i++) {\n        if (update[i]->level[i].forward == x) {\n            update[i]->level[i].span += x->level[i].span - 1;\n            update[i]->level[i].forward = x->level[i].forward;\n        } else {\n            update[i]->level[i].span -= 1;\n        }\n    }\n    if (x->level[0].forward) {\n        x->level[0].forward->backward = x->backward;\n    } else {\n        zsl->tail = x->backward;\n    }\n    while(zsl->level > 1 && zsl->header->level[zsl->level-1].forward == NULL)\n        zsl->level--;\n    zsl->length--;\n}\n```\n\n",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1608208038794100737/cV0PL48v-image-20230723042434378.png",
        "language": null,
        "viewNum": 15,
        "thumbNum": 1,
        "favourNum": 1,
        "commentNum": 0,
        "priority": 0,
        "userId": "1608208038794100737",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-07-23T12:24:43.000+00:00",
        "updateTime": "2023-08-01T11:48:23.000+00:00",
        "user": {
          "id": "1608208038794100737",
          "planetCode": "14757",
          "userName": "Karos",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1608208038794100737/n43g3wnh-QQ截图20230220091409.png",
          "gender": 1,
          "userProfile": "爱好 唱 跳 rap和篮球\uD83C\uDFC0",
          "userRole": "vip",
          "interests": [],
          "place": "四川",
          "birthday": "2003-02-11",
          "school": null,
          "major": "物联网工程",
          "education": "本科",
          "graduationYear": 2025,
          "jobStatus": "在校",
          "company": "嘉丽顿",
          "job": "后端",
          "workYear": -2,
          "direction": "后端",
          "goal": "实习",
          "github": "https://github.com/karosown",
          "blog": "https://www.wzl1.top/",
          "score": 10,
          "coin": 100,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-02-02T23:45:23.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-28T21:07:30.000+00:00",
          "updateTime": "2023-07-12T15:23:52.000+00:00"
        },
        "tags": [
          "文章",
          "Redis",
          "数据库",
          "数据结构"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1682013544297533441",
        "title": "java学习之运算符",
        "description": null,
        "content": "1. 算术运算符\n\n![image.png](https://pic.code-nav.cn/post_picture/1673111457186713601/N3jHBGCI-image.png)\n\n\n2. 赋值运算符\n   1. 语法结构: 变量 = 表达式的值或常量值.\n```java\n// 把常量17赋值给int类型的变量a\nint a = 17;\nSystem.out.println(\"a=\" + a);//a=17\n// += 把左边和右边的数据进行运算，最后赋值左边变量\na += 10;// 相当于a = a + 10\nSystem.out.println(\"a=\" + a);//a=27\n```\n\n3. 比较运算符\n   1. 作用: 比较变量或常量 表达式之间的大小关系,**结果都是Boolean类型.**\n   2. 语法格式: boolean result = 表达式A 比较运算符 表达式B\n| 运算符 | 运算规则 |\n| --- | --- |\n|     == | 相等于 |\n|      != | 不等于 |\n|      < | 小于 |\n|       > | 大于 |\n|      <= | 小于等于 |\n|      >= | 大于等于 |\n\n4. 三元运算符\n:::danger\n\n   1. **语法格式：结果数据类型 变量名 = boolean表达式 ？ 结果A ：结果B。**\n   2. **结果A和结果B 的数据类型需要一样。**\n   3. **必须定义变量接受运算的结果**\n:::\n```java\n//判断num取模是否等于0,如果等于0 B就等于true.\nBoolean B = num % 2 == 0 ? \"true\":\"false\";\n```\n\n5. 逻辑运算符\n>    1. 语法格式：boolean result = boolean表达式A 逻辑运算符 boolean表达式B;\n\n>    2. &&和  ||的执行效率更高，当前者可以判断时，不用执行后者。\n\n>    3. &和&&，| 和 | |的运算结果一样。\n\n| 运算符 | 运算规则 |  |\n| --- | --- | --- |\n| & | 与 | true & false--->false, 有false则为false |\n| &#124; | 或 | true &#124; false--->true ,有true则为true |\n| ！ | 非 | ！true--->false，将结果反转 |\n| ^ | 异或 | true ^false--->true，当两个结果不一样就为true |\n| && | 短路与 | true && false --->false，前者为true，则判断后者 |\n| &#124;&#124; | 短路或 | true  &#124; &#124; false--->true，前者为false，则判断后者 |\n\n> **注：() 的优先级最高，赋值运算符优先级最低；赋值运算符的 **\n> **运算方向从右向左。**\n\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 11,
        "thumbNum": 2,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-07-20T13:04:13.000+00:00",
        "updateTime": "2023-08-02T12:22:19.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 2,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-07-30T03:54:27.000+00:00"
        },
        "tags": [
          "文章",
          "后端",
          "Java",
          "笔记"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1680826349238882305",
        "title": "给学弟妹们的 10 个秋招建议！",
        "description": null,
        "content": "大家好，我是鱼皮。最近很多大公司的提前批陆陆续续开启了，说明秋招已经拉开了序幕，大家要准备起来了。\n\n所以我也赶紧写了一篇文章，结合自己曾经大厂求职的经验，并且从招聘方的角度，给学弟妹们一些秋招找工作的实质性建议，希望对大家有帮助。\n\n这次先分享 10 条建议，目标是尽量帮大家进大厂，所以部分建议对大多数同学来说可能会比较高。\n\n注意，以下建议不需要全部都做到，只要你能做到 **5 点及以上** ，你的秋招大概率会圆满上岸！\n\n\n\n### 1、早就是机会\n\n做任何事情都是一样的，准备和行动地越早，机会就越大。\n\n具体怎么 “早” 呢？\n\n首先， **能秋招，不春招！**\n\n之前有同学问我：鱼皮，我才刚学 Java 两个月，还要准备秋招么？是不是直接准备明年的春招就好了？\n\n千万别！\n\n即使你觉得自己在秋招截止前没法准备好，也不要把目标直接就定为 “明年的春招”。相信大家都是这样的，给自己定的目标越远，越容易拖延。\n\n如果你是今年有机会参与秋招的应届生，就把目标定为 “秋招上岸”，哪怕时间紧一点，不要犹豫，抓紧去学、去突击，而不是直接放弃。\n\n因为等到春招的时候，秋招已经上岸的同学、考研结束的同学、又准备了半年的同学都会一起来竞争越来越少的岗位，而且形式会更不明朗。\n\n所以早早行动起来，才是 “破卷” 的第一要义！\n\n另外，大家已经可以持续关注和寻找机会了，提前到网上了解一些公司开放招聘的时间、线上线下的宣讲会等，提前做好投递简历准备，而不是等到公司正式开放招聘，才去看公司的要求、再去写简历。\n\n> 另外还有一个我个人的行动准则，加引号是因为仅供参考。那就是在心态上 “别给自己留退路”，别老想着自己这件事做不成了还有其他的选择，而是要把所有的精力都放在秋招上，全力冲刺。\n\n\n\n### 2、一专多长\n\n因为如今网上的学习教程和项目教程都太多了，会导致大家的简历和经历没有什么区分度。\n\n想象一下，如果你在刷短视频，看到很多发量差不多的程序员在讲差不多的知识，可能一秒钟就划走了；但如果突然有一位光头强者、或者一位漂亮的小姐姐（女装大佬）在讲知识，那么你大概率会忍不住多刷几秒。\n\n面试官或 HR 看我们的简历也是一样的，如果我们简历上的技术千篇一律，都是大家耳熟能详的，而且写得又都差不多，那么很快就被他们 “划走了”。\n\n所以，建议大家在学完主流的开发技术之余，选择 **至少一个** 技术去深入学习，作为你个人的专长来吸引面试官。\n\n比如 MySQL 数据库，大家都会写 “熟悉索引、事务、性能优化” 等；但如果你阅读过一些 MySQL 高级书籍，可以去写你对查询优化器、MySQL 高可用、数据备份恢复、底层索引优化的理解和实践。从 “学习者” 变成 “实践者”，再从 “实践者” 变成 “研究者”，你的优势就会被放大。\n\n一个比较推荐的路子就是建议大家去阅读某个技术的高级书籍，了解其底层原理后，试着阅读 GitHub 上的简化版底层实现源码，再去阅读官方开源代码，并尝试提出一些 PR。\n\n如果你能给知名项目成功贡献 PR，那基本就稳了。\n\n\n\n### 3、分清主次\n\n大家刚准备秋招的时候，基本都会面临一个问题：我滴妈呀，八股文这么多，怎么背的完呀？！从哪开始背啊？！\n\n更可怕的是，你会发现八股文是越背越多的。。。\n\n其实完全不用慌，网上的八股文多，是因为随着时间持续不断积累和完善，但并不是说你要去背完所有的八股文。\n\n我们要做的是， **从我们自身的简历出发** ， **优先** 锁定可能会考到自己身上的八股文，分清主次。\n\n举个例子，你在简历上写了 “熟悉 Redis 的 RDB 和 AOF 机制”、并且项目中又运用到了 Redis。那么面试官大概率会考察 Redis 相关的八股文，你就针对性地去搜集和准备 Redis 相关的题目即可。\n\n无论你的时间多或少，都应该这么做。而不是别人背什么，我就背什么。\n\n当然，八股文肯定是准备得越充分越好。等把和自己简历强相关的八股文背完后，如果有时间，去网上搜集一些经典高频八股文，准备一下肯定是更加分的。\n\n\n\n### 4、视角切换\n\n很多同学由于没有过实习和招聘经验，写出的简历很容易停留在 “学生思维”。\n\n举个经典的例子：很多同学会在简历上写自我评价，比如 “我的学习能力强”。\n\n写自我评价本身没什么问题，但一定要有说服力。因为从招聘者的角度，如果不给出具体的事例证明，完全就是你在自夸而已。\n\n如果你要证明自己的学习能力强，就列举一些自学的例子、学习获奖的经历等等；证明自己写文档的能力强，就贴上自己写过的文档链接等。\n\n还有个例子，有些同学会觉得简历上的内容写得越多越好，甚至能写到 3 页纸。但事实上，简历内容在精不在多，就跟做视频一样，你能用最短的内容给别人讲明白一个知识点，效果会比长篇大论来解释更好。所以，尽量避免凑字数、写重复的技术、写重复的项目、写 “正确的废话”。\n\n当然，这也不绝对，在你的简历还写不满一页的时候，有啥就写啥吧，后期持续优化，优胜劣汰。\n\n我们要试着切换视角，想象一下，你如果是面试官，看到自己的这份简历，会问什么问题、觉得哪里写得好或不好。\n\n\n\n### 5、有的放矢\n\n这个技巧比较适用于时间较多、准备较充分、特别想进某个公司的同学。\n\n想象一下，如果你是一家公司的老板，现在有 2 名同学投递了简历。一位同学的简历是通用的，可以投递给所有公司；而另一位同学的简历是针对你们公司做了特定优化的，比如添加了公司的 Logo、在个人优势中响应了公司的价值观、对公司的业务有过研究等等。\n\n> 我在投递字节跳动时，给个人特点那里加了 “追求极致”，不知道是不是心理作用，反正也过了。\n\n你会更倾向于录取哪位同学呢？答案大概率是后者对吧。\n\n大家具体可以怎么做呢？\n\n有时间的同学，可以仔细阅读公司的岗位描述、并且提前去网上了解下公司的业务和系统，有的放矢，针对性地准备项目和简历。\n\n举个例子，你想进字节跳动的抖音电商部门，如果你的简历上能有一个 “简化版抖音” 的项目，或者能够对电商业务有进一步的理解，肯定是加分的。如果你对这家公司的业务做过市场调研，分析过他们的系统或网站，能够直接在简历上给他们一些建议（帮忙修一些他们的 Bug），也是大大加分的。\n\n\n\n### 6、差异化\n\n前面也提到了，现在很多同学的简历，尤其是项目经历这块，写得都差不多，没有什么区分度。\n\n在很多年以前，是只要你的技术水平达到了公司的要求，就有被发起面试的机会；但是现在计算机行业在慢慢恢复平淡，大家现在都是海投公司、每个公司可能都要收到成百上千份简历、岗位数又是有限的，如果你的简历还和大家一模一样，那么得到面试机会的概率就没那么高了。\n\n想要让自己的简历从海选中脱颖而出，一定要有一些差异化的内容。\n\n除了前面提到的 “一专多长”，要有至少一个有点深度的技术外，还有很多给简历增加区分度的方法。比如，给网络热门项目换皮，并且自主增加 2 - 3 个原本项目没有的功能；再比如去学一个相对新一点的技术、或者网上教程比较少的技术，比如后端的云原生相关中间件、服务网格、Serverless、DDD 架构设计等等。\n\n此外，如果你能有一些开源项目、或者个人上线项目经历的话，也能进一步突出自己的实践能力。告诉面试官：你不止能跟着教程完成项目，而是真的能 **自己做项目** 。\n\n\n\n### 7、持续复盘\n\n有同学向我抱怨过：鱼皮，我已经投了 1000 份简历了，为什么还是没回复呢？\n\n大家觉得会是什么原因？\n\n首先必须承认，就业环境是一个因素，但更多的则是这位同学本身的简历（或者投递简历的方式）是存在问题的。\n\n不幸的是，有些同学意识不到这点，可能就直接放弃了。\n\n需要注意的是，求职是一个 **持续的过程** 。不要因为前期的投递没有回复，就去否定自己，能用初版简历得到面试机会的，毕竟还是少数人。\n\n改变不了环境和学历等硬性条件，我们要做的便是改变自己。\n\n- 简历没有回复，就去对比其他同学的简历，持续学习来完善自己的简历，而不是始终拿老的同一份简历投递。\n- 面试不通过，就分析自己哪些面试题答的不好，或者是计算机基础不过关等等。在面试后立刻去把这些题目搞懂。\n\n我最初是在大二时就向腾讯等一线大厂投递了简历，由于当时的简历太菜，没有任何一家的回复。但是我持续更新自己的简历，等到大三暑期实习还没正式开放前，就收到了多个城市腾讯的主动面试邀请。\n\n总之一句话，秋招路漫漫，你要始终往前走，而不是原地等待好运降临。\n\n\n\n### 8、保持理性\n\n现在大家都比较焦虑，网上也有很多 “前端已死”、“后端已凉” 的言论。\n\n其实客观来看，从 22 年、甚至再早一些的时候，计算机的红利期就已经过去了。现在并不是说学计算机就找不到工作，只不过门槛提高了，不再像是几年前随便学点儿 servlet、学点儿前端三件套就能找到工作了而已。\n\n面对这种情况，我们还是要保持理性，思考一下：\n\n1）学计算机真的找不到工作么？还是说幸存者偏差，找到工作的不说话，找不到工作的组团抱怨？\n\n2）现在临时转行、或者突然放弃，对你来说是不是一个最优解？除了计算机之外，自己适合哪些工作呢？其他工作就好找么？\n\n如果你不学计算机的话，还有更好的选择，那么当然可以不学；但如果你只是因为这些言论和一些短暂的失败就 **轻易放弃自己学了几年的技术** ，尝试其他的方向，就能找到工作了么？\n\n理性客观地看待问题，做好自己该做的事情，总比跟风抱怨、或者什么都不做要好。\n\n\n\n### 9、建立连接\n\n所谓建立连接，就是尽可能多地认识大佬，积累人脉。\n\n举个最简单的例子，如果某家公司只招一个人，你是面试官，有两个候选者，一个人是你的朋友，另一个人你完全不认识，你会录取哪个人呢？\n\n建立连接其实是件很简单的事情，你可以多和学长学姐交流，如果他们进了公司，自然可以帮你内推；你可以多和面试官交流，在面试结束后主动询问联系方式，说不定后面他有其他的机会还能给你推荐；你可以多和 HR 交流，关系好了甚至可以得到一些行业内幕。\n\n此外，还可以通过写博客、开源社区、交流会等方式，认识更多同行者，一方面是抱团取暖，另外一方面，也是需要向上社交。想象一下，如果你的好友列表里有一位编程大牛，在求职中遇到了问题可以向他请教，能帮你节省多少时间？\n\n这是我之前收到的字节邀请，就是从 GitHub 上认识了我：\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/image-20230714153452496.png)\n\n再讲个我个人的小故事，也是之前分享过的真实经历。我在回老家的路上坐车时，认识一位阿里的老乡，路上聊的甚欢，就加了微信。后面没多久，大佬就给我抛阿里 P6 的橄榄枝了。\n\n\n\n### 10、时间管理\n\n大家每天都是 24 小时，有人一天能做 5 件事，有人一天却完不成 1 件事。\n\n为什么？\n\n除去天赋和能力的区别，时间管理是一个影响效率的核心因素。\n\n秋招的时间是有限的，大家就更要做好时间管理，才能比别人跑的更快。\n\n怎么做好时间管理呢？简单来说，3 件事：\n\n1）制定计划：每天都想好自己接下来要做什么，定制好周目标、月目标、总目标等\n\n2）安排优先级：优先做对于实现你目标来说性价比最高的事情，比如你现在简历还没准备好，就先写简历；发现简历没项目，就先把重点放在项目上，尽量提高自己的简历通过率，而不是每天花过量时间去背八股文，结果反而没有面试机会。\n\n3）时间 “复用” ：时间有限的情况下，尽量用同一份时间做好多件事。\n\n举个例子，你在背八股文的过程中，如果学到了一个自己之前完全没接触过的知识，会怎么办？\n\n大多数同学会说：背下来！\n\nOK，这当然没问题。不过聪明的同学，可能会这么做。\n\n我把这个知识搞懂，然后补充到简历上；如果合适的话，再把这个知识点运用到项目中。这样既通过实践理解了题目，又完善了简历和项目。\n\n比如背到 MySQL 性能优化的知识点时，就把那些方法（比如添加索引、Explain 分析）应用到项目中实际测试下效果， 给你的印象肯定会更深刻。\n\n当然，这必然会花费额外的时间，只是给大家一种选择的思路。比起单纯的死记硬背，这种方式更有利于整体的进步。\n\n\n\n---\n\n\n\nOK，以上就是想给学弟妹们的一些秋招建议，洋洋洒洒 4000 多字，有帮助的话，点个赞吧~",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1601072287388278786/s01wbhSE-640.jpg",
        "language": null,
        "viewNum": 115,
        "thumbNum": 9,
        "favourNum": 3,
        "commentNum": 0,
        "priority": 0,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-07-17T06:26:44.000+00:00",
        "updateTime": "2023-08-02T13:39:02.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 1995,
          "coin": 170,
          "followeeNum": 960,
          "followNum": 6,
          "followStatus": null,
          "vipExpireTime": "2024-05-24T03:35:38.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-08-02T14:13:54.000+00:00"
        },
        "tags": [
          "文章",
          "校招",
          "面试",
          "求职"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1678810191656652801",
        "title": "目前 毕业典礼刚过 上家公司辞掉了（当下环境找工作比想象难...） 目前在找工作",
        "description": "皮哥好  最近都在投简历中 断断续续 投了也有200多份把（最近） 但是 好像没什么线上面试（只有线下的） 想让您帮看下简历，分析下是什么原因 是.net原因 还是个人技术还需要沉淀 还是？总之谢了！",
        "content": "\n![汪启明.png](https://pic.code-nav.cn/post_picture/1668342245532643329/SsNuQThW-汪启明.png)",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1668342245532643329/JiLUjeHL-汪启明.png",
        "language": null,
        "viewNum": 104,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 2,
        "priority": 0,
        "userId": "1668342245532643329",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-07-11T16:55:15.000+00:00",
        "updateTime": "2023-08-02T13:50:36.000+00:00",
        "user": {
          "id": "1668342245532643329",
          "planetCode": "23557",
          "userName": "明微漾+15207082567",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/QOpd26S7DURXtQwjpOoczo3Hv4f1qQTPlRbYxPiafLibfbwRnU4Vw8HzFvb0qsdJukibmMegiafSanibuDByethclvA/132",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": null,
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 1,
          "followStatus": null,
          "vipExpireTime": "2024-06-12T20:01:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-12T19:39:22.000+00:00",
          "updateTime": "2023-07-11T16:55:28.000+00:00"
        },
        "tags": [
          "简历",
          "文章"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      }
    ],
    "total": "134",
    "size": "10",
    "current": "1",
    "orders": [],
    "optimizeCountSql": true,
    "searchCount": true,
    "countId": null,
    "maxLimit": null,
    "pages": "14"
  },
  "message": "ok"
}


